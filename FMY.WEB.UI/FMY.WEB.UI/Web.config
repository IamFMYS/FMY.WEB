<?xml version="1.0" encoding="utf-8"?>
<!--
  有关如何配置 ASP.NET 应用程序的详细信息，请访问
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<!--
说明：
     配置文件的查找优先级
     在.net提供了一个针对当前机器的配置文件，这个文件是machine.config，它位于%windir%\Microsoft.NET\Framework\v2.0.50727\CONFIG\文件下（%windir%是系统分区下的系统目录，在命令行模式下输入%windir%然后回车就能查看当前机器的系统目录，在Windows2003及WindowsXP中%windir%是系统分区下的windows目录，在Windows2000中%windir%是系统分区下的WinNT目录，在笔者机器上这个系统目录是C:\WINDOWS）。
     这个文件里面定义了针对当前机器的WinForm程序和asp.net应用程序的配置。
     在这个文件夹下还有一个web.config文件，这个文件包含了asp.net网站的常用配置。
     
     asp.net网站IIS启动的时候会加载配置文件中的配置信息，然后缓存这些信息，这样就不必每次去读取配置信息。
     在运行过程中asp.net应用程序会监视配置文件的变化情况，一旦编辑了这些配置信息，就会重新读取这些配置信息并缓存
     
     读取某个节点或者节点组信息时，是按照如下方式搜索:
          1.在当前页面所在目录下存在web.config文件，查看是否存在所要查找的结点名称，如果存在返回结果并停止查找
          2.当前页面所在目录下不存在web.config文件或者web.config文件中不存在该结点名，则查找它的上级目录，直到网站的根目录
          3.网站根目录下不存在web.config文件或者web.config文件中不存在该节点名则在%windir%\Microsoft.NET\Framework\v2.0.50727\CONFIG\web.config文件中查找
          4.在%windir%\Microsoft.NET\Framework\v2.0.50727\CONFIG\web.config文件中不存在相应结点，则在%windir%\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config文件中查找
          5.如果仍然没有找到则返回null
     如果web.config文件发生更改就会导致相应的应用程序重新启动,一些软件（如杀毒软件）每次完成对web.config的访问时就会修改web.config的访问时间属性，也会导致asp.net应用程序的重启。
-->
<configuration>
  <configSections>
    <sectionGroup name="robsunGroup">
      <section name="robsunSection" type="FMY.WEB.Comm.Tools.ConfigTools.CustomConfigSectionHandler,FMY.WEB.Comm" />
    </sectionGroup>
    <section name="CustomConfigSettings" type="FMY.WEB.Comm.Tools.ConfigTools.CustomConfigSectionHandler,FMY.WEB.Comm" />
  </configSections>

  <!--自定义节点 Start-->
  <CustomConfigSettings>
    <CustomConfigPath path="~/Config/CustomConfig.config" />
  </CustomConfigSettings>
  <robsunGroup>
    <robsunSection>
      <path value="NONE" />
      <companyName value="Robsun" />
      <isPrivate attribute="true" />
    </robsunSection>
  </robsunGroup>
  <!--自定义节点 End-->

  <connectionStrings>
    <add name="ConnectionStr" connectionString="data source=127.0.0.1;initial catalog=fmy.web;user id=sa;password=123" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="2.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="PreserveLoginUrl" value="true" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="vs:EnableBrowserLink" value="false" />
    <!--激活用户地址-->
    <add key="UserActivePageUrl" value="http://www.fmys.com/Handlers/ActiveUser.ashx" />
    <!--激活邮件主要内容-->
    <add key="ValidateEmailBody" value="点击下面链接激活账号，48小时生效，否则重新注册账号，链接只能使用一次，请尽快激活！" />
  </appSettings>
  <!--
    有关 web.config 更改的说明，请参见 http://go.microsoft.com/fwlink/?LinkId=235367。

    可在 <httpRuntime> 标记上设置以下特性。
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
  -->

  <!--system.web这个是为IIS6或者IIS7的经典模式用的-->
  <system.web>
    <!--
      　　<httpRuntime>
        节点用于对 ASP.NET HTTP 运行库设置。该节可以在计算机、站点、应用程序和子目录级别声明。
        　　例如下面的配置控制用户最大能上传的文件为40M（40*1024K），最大超时时间为60秒，最大并发请求为100个。
        -->
    <httpRuntime targetFramework="4.5" maxRequestLength="40960" executionTimeout="60" appRequestQueueLimit="100" />

    <!--
    <compilation>节点配置 ASP.NET 使用的所有编译设置。默认的debug属性为“true”，即允许调试，
    在这种情况下会影响网站的性能，所以在程序编译完成交付使用之后应将其设为“false”。
    -->
    <compilation debug="true" targetFramework="4.5" />

    <!--
    <customErrors>节点用于定义一些自定义错误信息的信息。
    此节点有Mode和defaultRedirect两个属性，
    defaultRedirect属性是一个可选属性，表示应用程序发生错误时重定向到的默认URL，如果没有指定该属性则显示一般性错误。
    Mode属性是一个必选属性，它有三个可能值，它们所代表的意义分别如下：
        1)On 表示在本地和远程用户都会看到自定义错误信息。
        2)Off 禁用自定义错误信息，本地和远程用户都会看到详细的错误信息。
        3)RemoteOnly 表示本地用户将看到详细错误信息，而远程用户将会看到自定义错误信息。
        error>子节点
　　在<customErrors>节点下还包含有<error>子节点，
  这个节点主要是根据服务器的HTTP错误状态代码而重定向到我们自定义的错误页面，
  注意要使<error>子节点下的配置生效，必须将<customErrors>节点节点的Mode属性设置为“On”。
    -->
    <customErrors mode="On" defaultRedirect="~/Error/error1.html">
      <error statusCode="404" redirect="~/Error/error1.html" />
      <error statusCode="403" redirect="~/Error/error2.html" />
    </customErrors>

    <pages controlRenderingCompatibilityVersion="4.0">
      <namespaces>
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
    </pages>
    <!--
    <sessionState>节点的Mode属性可以是以下几种值之一：
属性值 　　　　　　说明
Custom 　　　　使用自定义数据来存储会话状态数据。
InProc 　　　　  默认值。由asp.net辅助进程来存储会话状态数据。
Off 　　　　　　 禁用会话状态。
SQLServer 　　 使用进程外SQL Server数据库保存会话状态数据。
StateServer 　  使用进程外 ASP.NET 状态服务存储状态信息。
　　一般默认情况下使用InProc模式来存储会话状态数据，这种模式的好处是存取速度快，缺点是比较占用内存，所以不宜在这种模式下存储大型的用户会话数据。
  -->
    <sessionState mode="StateServer" timeout="20" />
  </system.web>

  <!--system.webServer这个是为IIS7的集成模式用的-->
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
    </modules>

    
    
      <!--url重定向 需安装iis插件 \Tool\-->
    <rewrite>
      <rules>
        <rule name="ruleComIndex" stopProcessing="true">
          <match url="(^gongsi/index/(\d+).html)" />
          <action type="Redirect" url="gongsi/{R:2}/" />
        </rule>
      </rules>
    </rewrite>
  
  <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers></system.webServer>

</configuration>


<!--当你有自定义的HttpModule和HttpHandler时，需要同时在这两处添加-->
<!--<system.web>这个是为IIS6或者IIS7的经典模式用的
    <httpHandlers>
      <remove verb="*" path="*.asmx"/>
      <add verb="*" path="CombineScriptHandler.aspx" validate="false" type="MvcScriptManager.CombineScriptHandler, MvcScriptManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6eb4f344e8972dc6"/>
      </httpHandlers>
    <httpModules>
      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </httpModules>
  </system.web>-->

<!--<system.webServer>
    这个是为IIS7的集成模式用的
    <validation validateIntegratedModeConfiguration="false"/>
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="ScriptModule"/>
      <remove name="UrlRoutingModule"/>
      <add name="ScriptModule" preCondition="managedHandler" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </modules>
    <handlers>
      <remove name="WebServiceHandlerFactory-Integrated"/>
      <remove name="ScriptHandlerFactory"/>
      <remove name="ScriptHandlerFactoryAppServices"/>
      <remove name="ScriptResource"/>
      <remove name="MvcHttpHandler"/>
      <remove name="UrlRoutingHandler"/>
      <add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
    </handlers>
  </system.webServer>-->