<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="ConnectionStr" connectionString="server=127.0.0.1;database=fmy.web;user id=sa;password=123"/>
  </connectionStrings>
  <system.serviceModel>

    <services>
      <!--属性设置,name:服务的完全限定名，命名空间+实现类名；behaviorConfiguration行为配置，取设置的behavior的名称，具体可见behaviors节点-->
      <service name="FMY.WCF.Test.Services.CalculatorService" behaviorConfiguration="CaculateService_ServiceBehavior">
        <host>
          <baseAddresses>
            <add baseAddress="net.tcp://127.0.0.1:8095/"/>
          </baseAddresses>
          <timeouts/>
        </host>
        <endpoint address="/calculatorservice"
                  binding="netTcpBinding" bindingConfiguration="CaculateService_NetTcpBinding"
                  contract="FMY.WCF.Test.Contract.ICalculator" >
          <!--服务标识。 部署时，应删除或替换下列标识元素，以反映用来运行所部署服务的标识。删除之后，WCF将自动推断相应标识。-->
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="net.tcp://127.0.0.1:8095/metadata" binding="mexTcpBinding" contract="IMetadataExchange"></endpoint>
        <!--<endpoint kind="mexEndpoint"></endpoint>-->
        <!--标准终结点-->
        <!--P40-->
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="CaculateService_ServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <serviceMetadata httpGetEnabled="true" httpGetUrl="http://127.0.0.1/calculatorservice/metadata"/>
          <serviceTimeouts transactionTimeout="00:30:00"/>
          <!--服务终结点的可发现性-->
          <!--<serviceDiscovery>
            <announcementEndpoints></announcementEndpoints>
          </serviceDiscovery>-->
          <!--maxItemsInObjectGraph指定要序列化或反序列化的最大项数-->
          <!--<dataContractSerializer maxItemsInObjectGraph=""/>-->
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <!--绑定可指定在与终结点通话时所使用的通信机制，并指示如何连接到终结点-->
    <bindings>
      <!--可用于为通过 HTTP 请求（而不是 SOAP 消息）公开的 WCF Web 服务配置终结点-->
      <wsHttpBinding>
        <binding name="CaculateService_WSHttpBinding" >
          <security mode="None"></security>
        </binding>
      </wsHttpBinding>

      <basicHttpBinding>
        <binding name="CaculateService_BasicHttpBinding" transferMode="Buffered"  messageEncoding="Text" allowCookies="false">
          <security mode="None">
            <message clientCredentialType="Certificate"></message>
            <transport clientCredentialType="None"></transport>
          </security>
        </binding>
      </basicHttpBinding>
      <!--适用于 WCF 应用程序之间跨计算机的通信-->
      <netTcpBinding>
        <!--<binding name="CaculateService_NetTcpBinding" transactionFlow="true" transactionProtocol="WSAtomicTransactionOctober2004" >-->
        <binding name="CaculateService_NetTcpBinding" transactionFlow="true">
          <security mode="Transport">
            <transport protectionLevel="EncryptAndSign" clientCredentialType="Windows" />
          </security>
          <!--<reliableSession enabled="true" ordered="true"/>-->
        </binding>
      </netTcpBinding>
      <!--适用于 WCF 应用程序之间的跨计算机的通信-->
      <netMsmqBinding>
        <binding name="CaculateService_NetMsmqBinding" >
          <security mode="None">
            <message clientCredentialType="None"/>
            <transport />
          </security>
        </binding>
      </netMsmqBinding>
      <!--适用于 WCF 应用程序之间通讯-->
      <netNamedPipeBinding>
        <binding name="NetNamePipeBinding" >
          <security>
          </security>
        </binding>
      </netNamedPipeBinding>
    </bindings>
  </system.serviceModel>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>
</configuration>
<!--在WCF中，behavior被定义为Attribute，
其中，System.ServiceModel.ServiceBehaviorAttribute和System.ServiceModel.OperationBehaviorAttribute是最常用的behavior。-->

<!--利用ServiceBehavior与OperationBehavior可以控制服务的如下属性：
1、 对象实例的生命周期；
2、 并发与异步处理；
3、 配置行为；
4、 事务行为；
5、 序列化行为；
6、 元数据转换；
7、 会话的生命周期；
8、 地址过滤以及消息头的处理；
9、 模拟（Impersonation）；-->