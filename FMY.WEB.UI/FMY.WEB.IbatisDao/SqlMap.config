<?xml version="1.0" encoding="utf-8" ?>
<sqlMapConfig xmlns="http://ibatis.apache.org/dataMapper"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--properties ：配置一些常量属性，如：<property key="useStatementNamespaces" value="false"/>。
  如果这些属性有很多的话可以单独写一个文件里面，
  再通过resource（或url, embedded分别是引用url和编译在程序中的资源文件）属性引用进来 三种引入说明见底部-->
  <!--<properties embedded="database.config, IBatisNetDemo"/>-->
  <properties resource="Config/FMY.WEB.IbatisDao.Properties.config"/>

  <settings>
    <setting useStatementNamespaces="true" />
    <!--是否使用语句命名空间，这里的命名空间指的是映射文件中sqlMap节点的namespace属性。-->
    <setting cacheModelsEnabled="true" />
    <!--配置是否启用iBatis的缓存机制，默认是"true"。-->
    <setting validateSqlMap="false" />
    <!--配置是否启用SqlMapConfig.xsd schema验证映射文件，默认是"false"。-->
  </settings>

  <!--用于提供数据库驱动配置文件的文件名和路径-->
  <!--<providers resource="Providers.config"/>-->
  <providers embedded="providers.config,FMY.WEB.IbatisDao"/>

  <database>
    <!--1.如果在providers.config文件中指定了默认的数据库驱动，那么provider节点就不需要设置了，
          它的作用是在换数据库驱动时不需要修改providers.config文件。
        2.datasource节点用于指定ADO.NET Connection String.-->
    <provider name="sqlServer2.0" />
    <dataSource 
      name="SalesData" 
      connectionString="Data Source=${DataSource};Initial Catalog=${DataBase};
                        User Id=${UserId};PassWord=${PassWord};
                        Persist Security Info=true;"/>
    <!--
    integrated security=true 的意思是集成验证，也就是说使用Windows验证的方式去连接到数据库服务器。这样方式的好处是不需要在连接字符串中编写用户名和密码，从一定程度上说提高了安全性。
    Persist Security Info属性的意思是表示是否保存安全信息，其实可以简单的理解为"ADO在数据库连接成功后是否保存密码信息"
    -->
  </database>

  <sqlMaps>
    <sqlMap embedded="${Root}.User.xml, ${Assembly}" />
    <sqlMap embedded="${Root}.UserRegistEmail.xml, ${Assembly}" />
  </sqlMaps>
  
</sqlMapConfig>





<!--  文件引用

凡涉及到引用外部文件的都可以通过以上resource，url，embedded 三种方式实现。

resource
指定数据驱动配置文件从项目的根目录进行加载，如resource="providers.config"

url
指定数据驱动配置文件从文件的绝对路径进行加载，
如url="c:\IBatis\Resources\providers.config"-或者-url="file://c:\IBatis\Resources\providers.config"

embedded
指定数据驱动配置文件可以作为程序集的资源文件进行加载，如embedded="Resources.providers.config, MyApp.Data"

-->

<!--   事务？


-->

<!--   缓存？ http://ibatis.apache.org/docs/dotnet/datamapper/ch03s08.html

refer:http://www.cnblogs.com/yongze103/archive/2011/07/25/2116593.html
3.2  iBATIS高速缓存模型的类型
3.2.1 MEMORY
     MEMORY高速缓存是一种基于引用的高速缓存。
     MEMORY高速缓存模型对于那些更关注内存的管理策略而不是对象的访问策略的应用程序而言是完美的。
     有了STRONG、SOFT、WEAK这三种引用类型，就可以确定哪些结果应该比其他结果保留更长的时间。
     
"MEMORY" (com.ibatis.db.sqlmap.cache.memory.MemoryCacheController) 
MEMORY cache 实现使用 reference 类型来管理 cache 的行为。垃圾收集器可以根据 reference类型判断是否要回收 cache 中的数据。MEMORY实现适用于没有统一的对象重用模式的应用，或内存不足的应用。 

MEMORY实现可以这样配置：

<cacheModel id="product-cache" type="MEMORY"> 
<flushInterval hours="24"/> 
<flushOnExecute statement="insertProduct"/> 
<flushOnExecute statement="updateProduct"/> 
<flushOnExecute statement="deleteProduct"/> 
<property name="reference-type" value="WEAK"/>
</cacheModel>

// MEMORY cache 实现只认识一个<property>元素。这个名为“reference-type”属性的值必须是 STRONG，SOFT 和 WEAK 三者其一。这三个值分别对应于 JVM 不同的内存 reference类型。

3.2.2 LRU
     LRU类型的高速缓存模型使用最近最少使用策略来管理高速缓存。
     该高速缓存的内部机制会在后台记录哪些对象最近最少使用，一旦超过高速缓存大小限制就会废弃它们。
     大小限制规定了高速缓存中可以存放的对象数目。应避免将那些占用较大内存的对象放置在此类高速缓存中，否则内存会很快耗尽。
     LRU高速缓存非常设用于那些需要根据某些特定对象的访问频率来管理的高速缓存的情况。
     通常这种高速缓存策略试用于那些需要高速缓存用于分页结果或关键词搜索结果的对象应用程序中。
     
     
"LRU" (com.ibatis.db.sqlmapache.lru.LruCacheController) 
LRU Cache 实现用“近期最少使用”原则来确定如何从 Cache 中清除对象。当 Cache 溢出时，最近最少使用的对象将被从 Cache 中清除。使用这种方法，如果一个特定的对象总是被使用，它将保留在 Cache 中，而且被清除的可能性最小。对于在较长的期间内，某些用户经常使用某些特定对象的情况（例如，在 PaginatedList 和常用的查询关键字结果集中翻
页），LRU Cache 是一个不错的选择。

LRU Cache实现可以这样配置：

<cacheModel id="product-cache" type="LRU"> 
<flushInterval hours="24"/> 
<flushOnExecute statement="insertProduct"/> 
<flushOnExecute statement="updateProduct"/> 
<flushOnExecute statement="deleteProduct"/> 
<property name="size" value="1000"/>
</cacheModel>

// LRU Cache实现只认可一个 property元素。其名为“cache-size”的属性值必须是整数，代表同时保存在 Cache中对象的最大数目。值得注意的是，这里指的对象可以是任意的，从单一的 String 对象到 Java Bean 的 ArrayList 对象都可以。因此，不要 Cache太多的对象，以免内存不足。
3.2.3 FIFO
     FIFO高速缓存模型采用先进先出的管理策略，是一种基于时间的策略，使用于放置那些初放入时使用频率高、随时间流逝访问频率就会降低的对象。
     如：报表、报告股票价格。
     
"FIFO" (com.ibatis.db.sqlmap.cache.fifo.FifoCacheController) 
FIFO Cache 实现用“先进先出”原则来确定如何从 Cache 中清除对象。当 Cache 溢出时，最先进入 Cache 的对象将从 Cache 中清除。对于短时间内持续引用特定的查询而后很可能不再使用的情况，FIFO Cache 是很好的选择。 

FIFO Cache可以这样配置：

<cacheModel id="product-cache" type="FIFO"> 
<flushInterval hours="24"/> 
<flushOnExecute statement="insertProduct"/> 
<flushOnExecute statement="updateProduct"/> 
<flushOnExecute statement="deleteProduct"/> 
<property name="size" value="1000"/> 
</cacheModel>

// property 的 size 同LRU

3.2.4 OSCACHE
     OSCache是个一个广泛采用的高性能的J2EE缓存框架，OSCache能用于任何Java应用程序的普通的缓存解决方案。OSCache有以下特点：
      缓存任何对象，你可以不受限制的缓存部分jsp页面或HTTP请求，任何java对象都可以缓存。
　　拥有全面的API  OSCache API给你全面的程序来控制所有的OSCache特性。
　　永久缓存  缓存能随意的写入硬盘，因此允许昂贵的创建（expensive-to-create）数据来保持缓存，甚至能让应用重启。
　　支持集群  集群缓存数据能被单个的进行参数配置，不需要修改代码。
　　缓存记录的过期  你可以有最大限度的控制缓存对象的过期，包括可插入式的刷新策略（如果默认性能不需要时）
3.2.5自定义高速缓存模型
     只需要实现com.ibatis.sqlmap.engine.cache.CacheController接口即可，配置时设定type为全限类名或其别名即可。
-->